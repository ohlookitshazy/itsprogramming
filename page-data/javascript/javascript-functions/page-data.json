{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/javascript-functions/","result":{"data":{"markdownRemark":{"html":"<p>There is a way to reuse your code within the file itself too, very useful when your code grows into hundreds of lines.</p>\n<h1>Functions</h1>\n<p>You can write a JavaScript function once and then re-use it in countless other scenarios. This is how you define a function in JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To re-use it, or more precisely - \"call\" it, you'd write this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you see, the difference, is the curly braces \"{}\" they define the function \"body\" and the other stuff, like the name \"addTwoNumbers\" and the input arguments, which we haven't added yet. </p>\n<p>For calling a function, you have to have it defined in the code. If you'd have the function definition in a .js file that is not linked, it will not work.</p>\n<h1>Input Arguments</h1>\n<p>To make the example function work, obviously we have to give it two numbers to add, so let's do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This specifies, that you can insert two values, or arguments into this function. These are only the references that will be applied to the function and will exist only within the function, so that you can work with the values in the function itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we have defined the calculation of both elements. So what should we do with the result? Let's change the text of a HTML paragraph to it!</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>With a simple HTML element defined, we can now again target it to change it's properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we target the element and provide the source of the change to be the calculation itself. The only thing left to make the changes visible, is now we need to call the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now your code should look like this:</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/itshazy/t6vqemyx/embedded/js,html,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n<p>So now you have effectively made a reusable function, which adds the two numbers it receives and changes the content of a paragraph element to show the resulting value.</p>\n<p>It would be cool to make this function more robust, so let's upgrade it!</p>\n<p>Let's make it accept any class, not just the elements with the class \"myId\".</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this simple change, of introducing a third input called \"id\" and adding the value to the \".getElementById\" input, we can now have the same functionality as before, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you can call this function as many times as needed and perhaps target other elements with different id's:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOtherId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Without rewriting the basic logic to do it every time, this allows you to save many many hours of grunt work. With that in mind, I'd suggest thinking of functions as tools to achieve something specific, so one purpose for each function. </p>\n<p>Another important thing to note, is that when naming functions, name them as verbs, so that when reading code where multiple functions get called, you can clearly understand what's happening.</p>\n<p>In our previous example the function name doesn't fully describe what it does, so let's improve it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbersAndOutputToDiv</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addTwoNumbersAndOutputToDiv</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addTwoNumbersAndOutputToDiv</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myOtherId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok, so now we can see more clearly what the function does, but the name is pretty long now, which indicates that this function is managing more than one concern. How do we fix this? We split the concerns and thus the code too. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">outputToDiv</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we have two functions. \"addTwoNumbers\" calculates the sum of two numbers. \"outputToDiv\" takes content and an id, then replaces the divs content with the new content.</p>\n<p>This already makes code more maintainable and each functionality available for wherever else we would need it in the future too.</p>\n<p>There are two types of functions you can define:</p>\n<ul>\n<li>Functions that return a value</li>\n<li>Functions that don't return a value (aka return is void)</li>\n</ul>\n<p>We do have a problem here, the \"addTwoNumbers\" calculates the result, but doesn't do anything with it. Because both of our functions don't return a value, but we do need to somehow get the value out of the first function. So let's enable it to <strong>return</strong> something.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All that is left now is to chain them together, which we can do like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">outputToDiv</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It's perfectly fine to provide a function, instead of a value, but it's important to have the result returned.</p>\n<p>Notice that we can now reuse both functions either together like this, or they can be called separately:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">outputToDiv</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">outputToDiv</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This not only makes your code more reusable and saves tons of time, but the code is more readable. It's important to understand that you will be reading much more code than you will be writing. So keep it tidy. </p>","frontmatter":{"title":"JavaScript Functions","index":2}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"So far we have looked at HTML and CSS, but you must've noticed the \"JS\" tab in the Codepen examples. JS stands for JavaScript. It is a…","fields":{"slug":"/javascript/what-is-javascript/"},"frontmatter":{"date":"2020-04-25T00:00:00.000Z","title":"What is JavaScript?","categories":["JavaScript"],"index":0},"timeToRead":4}},{"node":{"excerpt":"We looked at a few ideas of JavaScript in the previous post, let's go in more detail about each one. Storing Values We stored numbers and…","fields":{"slug":"/javascript/javascript-basics/"},"frontmatter":{"date":"2020-04-26T00:00:00.000Z","title":"JavaScript Basics","categories":["JavaScript"],"index":1},"timeToRead":5}},{"node":{"excerpt":"There is a way to reuse your code within the file itself too, very useful when your code grows into hundreds of lines. Functions You can…","fields":{"slug":"/javascript/javascript-functions/"},"frontmatter":{"date":"2020-04-26T00:00:00.000Z","title":"JavaScript Functions","categories":["JavaScript"],"index":2},"timeToRead":4}},{"node":{"excerpt":"Great! We're already writing some basic JavaScript! So far we've done it in Codepen examples, so how do we go about setting them up locally…","fields":{"slug":"/javascript/inline-vs-external-javascript/"},"frontmatter":{"date":"2020-04-26T00:00:00.000Z","title":"Inline vs External JavaScript","categories":["JavaScript"],"index":3},"timeToRead":3}},{"node":{"excerpt":"Let's play around with a few of the things we covered previously so that you can practice them in different scenarios. Let's also learn…","fields":{"slug":"/javascript/while-loops-and-timers/"},"frontmatter":{"date":"2020-04-26T00:00:00.000Z","title":"While Loops and Timers","categories":["JavaScript"],"index":4},"timeToRead":6}}]}},"pageContext":{"slug":"/javascript/javascript-functions/","category":"JavaScript","index":2}},"staticQueryHashes":[]}