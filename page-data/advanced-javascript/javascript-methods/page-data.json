{"componentChunkName":"component---src-templates-blog-post-js","path":"/advanced-javascript/javascript-methods/","result":{"data":{"markdownRemark":{"html":"<p>Classes define blueprints for objects. Objects define multiple properties. Objects can also have functions, that they can perform (also known as \"methods\").</p>\n<h1>What are Methods?</h1>\n<blockquote>\n<p>\"Properties that contain functions are generally called <strong>methods</strong> ...\"</p>\n</blockquote>\n<p>from the book <a href=\"https://eloquentjavascript.net/04_data.html#p_96KudJIN5i\">\"Eloquent JavaScript\"</a>.</p>\n<p>So for the sake of simplicity if you're not using a function that's more generic (not defined in a class), that's <strong>a function</strong>.</p>\n<p>If you're using a function that's coming from a class, that's <strong>a method</strong>.</p>\n<p>I have to admit, I am used to calling all functions as methods, mainly because I work mainly with object oriented code. It's a habit.</p>\n<h1>Defining Methods</h1>\n<p>So to clarify even further, let's define a method for our fridge object, from the previous post:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And add a method to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That's it! Now once you create an object of this type, you can use it, like \"myFridgeObject.turnOn()\". </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">.</span>turnedOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: false</span>\n\nmyFridgeObject<span class=\"token punctuation\">.</span><span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">.</span>turnedOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: true</span></code></pre></div>\n<p>You can do all of the same stuff here as with normal functions, like pass input parameters, have them return some value, or not return any values.</p>\n<p>Let's try it out! </p>\n<p>First, I don't know about you, but my fridge doesn't have a separate button to turn it on or off, so let's get that working first.</p>\n<p>Now we have a problem. The method will turn the fridge on regardless if it's off or on. So the logic we wan't to create should be aware of what is the status of the fridge before doing anything, then based on either if it's on or off, should switch to the other process.</p>\n<p>So the needed logic goes something like this:</p>\n<ul>\n<li>\n<p>If fridge is off</p>\n<ul>\n<li>Turn it on</li>\n</ul>\n</li>\n<li>\n<p>If fridge is on</p>\n<ul>\n<li>Turn it off</li>\n</ul>\n</li>\n</ul>\n<p>If we change it slightly:</p>\n<ul>\n<li>\n<p>If (fridge.turnedOn == false)</p>\n<ul>\n<li>fridge.turnedOn = true</li>\n</ul>\n</li>\n<li>\n<p>If (fridge.turnedOn == true)</p>\n<ul>\n<li>fridge.turnedOn = false</li>\n</ul>\n</li>\n</ul>\n<p>That starts to look like code! Deconstructing problems like this just with words, before you write any code is super efficient. It's also called writing \"pseudo-code\", where you just break down the conditions and the requirements for the data flow with words.</p>\n<p>Let's upgrade our fridge!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cool! Now every time we call \".toggleState()\" it will switch to the other state, right? </p>\n<p>Nope.</p>\n<p>In the example, the second \"if\" statement will cancel out the first one. So once the fridge is running, it will always be running. Forever.</p>\n<p>To have one <strong>or</strong> the other to execute, you chain them with an \"else if\", as we have done before:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">toggleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">.</span>turnedOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: false</span>\n\nmyFridgeObject<span class=\"token punctuation\">.</span><span class=\"token function\">toggleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">.</span>turnedOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: true</span>\n\nmyFridgeObject<span class=\"token punctuation\">.</span><span class=\"token function\">toggleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">.</span>turnedOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: false</span></code></pre></div>\n<p>Cool! Now it works! </p>\n<p>Let's upgrade it even further! Let's add a method that accepts a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">toggleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">changeItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newItems</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> newItems<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Easy as that! Now changing the contents, <strong>after</strong> a fridge has been created is possible! You'd use it as you'd expect:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">changeItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newItems</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> newItems<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Output: undefined</span>\n\nmyFridgeObject<span class=\"token punctuation\">.</span><span class=\"token function\">changeItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Cake\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ice Cream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Yoghurt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Output: (3) [\"Cake\", \"Ice Cream\", \"Yoghurt\"]</span></code></pre></div>\n<p>Notice that if a constructor might do something with the input parameters for the object, instead of just assigning them directly, then you might crash the logic flow, because you can leave out the input parameters, like I left out the \"items\" value (the third parameter), when creating it.</p>\n<p>For a challenge, try:</p>\n<ul>\n<li>Creating a method, that adds one or more items to the fridge,</li>\n<li>Creating a method, that removes an item by name from the fridge,</li>\n<li>Add a new property \"outsideTemperateInCelsius\" and have the fridge turn on if the \"outside temperature\" is above some number,</li>\n<li>Create two fridges and have one pass all of it's items to the other</li>\n</ul>","frontmatter":{"title":"JavaScript Methods","index":1}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"You probably noticed that we used some JavaScript objects previously, like \"jQuery\", \"document\", \"Math\" to name a few. They seem to be…","fields":{"slug":"/advanced-javascript/javascript-objects/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"JavaScript Objects","categories":["Advanced JavaScript"],"index":0},"timeToRead":6}},{"node":{"excerpt":"Classes define blueprints for objects. Objects define multiple properties. Objects can also have functions, that they can perform (also…","fields":{"slug":"/advanced-javascript/javascript-methods/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"JavaScript Methods","categories":["Advanced JavaScript"],"index":1},"timeToRead":4}},{"node":{"excerpt":"Objects are a powerful way to create data structures, provide them with properties and methods. Having them interact with one another and…","fields":{"slug":"/advanced-javascript/object-inheritance/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"Object Inheritance","categories":["Advanced JavaScript"],"index":2},"timeToRead":3}},{"node":{"excerpt":"So you've probably heard of the word \"algorithms\" by now, either in a good or a bad light, but in my opinion, they're just a tool, like any…","fields":{"slug":"/advanced-javascript/algorithms/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"Algorithms","categories":["Advanced JavaScript"],"index":3},"timeToRead":3}}]}},"pageContext":{"slug":"/advanced-javascript/javascript-methods/","category":"Advanced JavaScript","index":1}},"staticQueryHashes":[]}