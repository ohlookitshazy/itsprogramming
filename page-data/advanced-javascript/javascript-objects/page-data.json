{"componentChunkName":"component---src-templates-blog-post-js","path":"/advanced-javascript/javascript-objects/","result":{"data":{"markdownRemark":{"html":"<p>You probably noticed that we used some JavaScript objects previously, like \"jQuery\", \"document\", \"Math\" to name a few. They seem to be really useful and people seem to be making them. What are they?</p>\n<h1>What are JavaScript Objects?</h1>\n<p>This is an important topic, because not only you will learn the advanced JavaScript use cases, but also the principles of what is known as \"Object Oriented Programming\". It's a design for developing software, centered around the use of objects. This design spans many programming languages and it's principles are shared too.</p>\n<p>I will even go as far to leave a link to <a href=\"https://eloquentjavascript.net/04_data.html\">the appropriate chapter</a> in the book \"Eloquent Javascript\", because it is a topic that is so important, that i'd suggest learning about it from different sources.</p>\n<p>Simply put: <strong>Objects are data structures.</strong></p>\n<p>So far we've looked at simple data types, like numbers, strings and etc. objects are just collections of these stored in one entity. So what's a better way than to jump in and make one?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Not too difficult. </p>\n<p>What now?</p>\n<p>Currently you've made just a default, empty object. Empty, because Objects are supposed to hold properties of their own. Understanding objects is easier, if you compare them to everyday objects, like a fridge, or a TV remote, anything really. </p>\n<p>Let's create an object that resembles a fridge:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myFridge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyFridge<span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nmyFridge<span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nmyFridge<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you see, you can specify any type of properties for it. Then you can use the object, doing stuff like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myFridge<span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Fridge is too warm!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// or</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">There's currently </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myFridge<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> items in the fridge.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You probably noticed, that we have an interesting way of creating objects - \"new Object();\", it seems to look like a function call, because it has the parentheses \"()\" at the end. That's becaue <strong>it is one</strong>. It's a special function call, that returns an object of a specific type. It's also known as a <strong>constructor</strong>. Constructor functions are defined in the <strong>object class definition</strong>, so that you can later call it like: \"x();\" and replacing \"x\" with the needed <strong>class</strong>. </p>\n<p>Don't mistake these for CSS classes, only the name is common.</p>\n<h1>JavaScript Classes</h1>\n<p>Let's take a step back, to understand the context:</p>\n<ul>\n<li>You define an object <strong>class</strong> </li>\n<li>You define the <strong>constructor</strong>, within in the class</li>\n<li>You call this constructor, whenever you need an object from this class</li>\n</ul>\n<p>So let's take a look at this idea in code, by re-creating the fridge object, starting with the object class:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, you thought it's going to be something crazy right? Nope, you define a class similiarly as you define a function. Now you can create fridge objects, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyFridgeObject<span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nmyFridgeObject<span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nmyFridgeObject<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this case, all \"myFridge\" objects will still come out as empty, because we are not changing the way they're being created in the constructor. In fact, we don't have a constructor function yet, so let's add it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Not too bad. It's just a function, inside of a class declaration. The constructor function will return the object and within the body of this function, you can define exactly how it is returned. Perhaps we'd like the fridges to come out turned off by default? You know, saving the environment and stuff. We'd do it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now if you log this object, you'll see that this property is set by default for all of the new objects created (also known as \"instantiated\") and will remain such until changed:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: myFridge {turnedOn: false}</span>\n\nmyFridgeObject<span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nmyFridgeObject<span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nmyFridgeObject<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: myFridge {turnedOn: true, temperatureInCelsius: 3, items: Array(5)}</span></code></pre></div>\n<p>Makes sense, right? We used \"this\" keyword to target the \"currently selected\" (as I like to think about it) object, which in that case is the one \"going through the constructor\" or \"being created\".</p>\n<h1>Creating Custom Objects</h1>\n<p>Constructors are very convenient, they literally allow you to place all of the creation stuff in one place and just call it whenever needed! Would be really great to get different objects out every time though, not just a ton of fridges that aren't turned on.</p>\n<p>For starters, let's bring in all of the properties into the constructor, to clean up the code a bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Much better. Now, let's say we'd like to choose either a fridge is turned on or off by default. Remember that constructors are in fact functions, that return objects. Functions are able to receive values and use them, constructor functions are no different, so let's add a value to the function parentheses:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// removed some code for brevity</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOnByDefault</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOnByDefault<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Simply give a name to the input value, in our case \"turnedOnByDefault\" into the parentheses, then provide the value in the constructor, to assign this value to the property upon creating the object. In our case \"this.turnedOn\" will receive whatever is passed into the constructor. Then when we create the \"myFridgeObject\", we provide the value \"true\" which is what we used previously too.</p>\n<p>Now you can simply choose whether your fridges will be turned on, or off by default:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// removed some code for brevity</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOnByDefault</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOnByDefault<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myOtherFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>And of course you can do this for all properties too:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOnByDefault<span class=\"token punctuation\">,</span> defaultTemperatureInCelsius<span class=\"token punctuation\">,</span> defaultItems</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOnByDefault<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> defaultTemperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> defaultItems<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you can get a custom fridge every time you need it! </p>\n<p>By the way, you don't have to write \"default\" for the input names, it can be whatever you need. My suggestion is to keep it the same name as the property, it prevents confusion, improves readability too:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myFridge</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">turnedOn<span class=\"token punctuation\">,</span> temperatureInCelsius<span class=\"token punctuation\">,</span> items</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turnedOn <span class=\"token operator\">=</span> turnedOn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>temperatureInCelsius <span class=\"token operator\">=</span> temperatureInCelsius<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myFridgeObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myFridge</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Milk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cheese\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Salad\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myFridgeObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Congrats! You've taken your first steps in Object Oriented Programming and you will greatly improve the practicality of your code as you move along. </p>\n<p>You can actually already see how much time you can save, if only you take a moment and understand the requirements of the objects you will need and plan out the \"blueprint\" or \"class\" for it, then just make it robust for many types of use cases!</p>\n<p>Best part? If you'd ever need to upgrade your fridge objects, perhaps integrate social media or a sound system, then you can do it once, in the constructor.</p>","frontmatter":{"title":"JavaScript Objects","index":0}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"You probably noticed that we used some JavaScript objects previously, like \"jQuery\", \"document\", \"Math\" to name a few. They seem to be…","fields":{"slug":"/advanced-javascript/javascript-objects/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"JavaScript Objects","categories":["Advanced JavaScript"],"index":0},"timeToRead":6}},{"node":{"excerpt":"Classes define blueprints for objects. Objects define multiple properties. Objects can also have functions, that they can perform (also…","fields":{"slug":"/advanced-javascript/javascript-methods/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"JavaScript Methods","categories":["Advanced JavaScript"],"index":1},"timeToRead":4}},{"node":{"excerpt":"Objects are a powerful way to create data structures, provide them with properties and methods. Having them interact with one another and…","fields":{"slug":"/advanced-javascript/object-inheritance/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"Object Inheritance","categories":["Advanced JavaScript"],"index":2},"timeToRead":3}},{"node":{"excerpt":"So you've probably heard of the word \"algorithms\" by now, either in a good or a bad light, but in my opinion, they're just a tool, like any…","fields":{"slug":"/advanced-javascript/algorithms/"},"frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"Algorithms","categories":["Advanced JavaScript"],"index":3},"timeToRead":3}}]}},"pageContext":{"slug":"/advanced-javascript/javascript-objects/","category":"Advanced JavaScript","index":0}},"staticQueryHashes":[]}